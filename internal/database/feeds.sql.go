// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addFeed = `-- name: AddFeed :exec
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

type AddFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) AddFeed(ctx context.Context, arg AddFeedParams) error {
	_, err := q.db.ExecContext(ctx, addFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	return err
}

const getFeedIDByURL = `-- name: GetFeedIDByURL :one
SELECT id
FROM feeds
WHERE url = $1
`

func (q *Queries) GetFeedIDByURL(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getFeedIDByURL, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at 
FROM feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeed = `-- name: GetNextFeed :one
SELECT feeds.url AS url
FROM feeds
INNER JOIN feed_follows
ON feeds.id = feed_follows.feed_id
WHERE feed_follows.user_id = $1
ORDER BY last_fetched_at ASC NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeed(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getNextFeed, userID)
	var url string
	err := row.Scan(&url)
	return url, err
}

const markFetchedByURL = `-- name: MarkFetchedByURL :exec
UPDATE feeds
SET updated_at = $2, last_fetched_at = $2
WHERE url = $1
`

type MarkFetchedByURLParams struct {
	Url       string
	UpdatedAt time.Time
}

func (q *Queries) MarkFetchedByURL(ctx context.Context, arg MarkFetchedByURLParams) error {
	_, err := q.db.ExecContext(ctx, markFetchedByURL, arg.Url, arg.UpdatedAt)
	return err
}
